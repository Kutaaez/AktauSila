@startuml design_patterns_diagram

skinparam componentStyle rectangle
skinparam stereotypeCBackgroundColor Wheat
skinparam stereotypeCBorderColor SaddleBrown
skinparam component {
  BackgroundColor #F9F0DF
  BorderColor #8B4513
}

' Strategy Pattern
package "Strategy Pattern" {
  interface IMoveStrategy <<Strategy>> {
    +executeMove(boardState: BoardState, hole: int, playerColor: int): boolean
  }
  class StandardMoveStrategy {
    -rules: IRules
    +StandardMoveStrategy(rules: IRules)
    +executeMove(boardState: BoardState, hole: int, playerColor: int): boolean
  }
  class MoveStrategyFactory <<Factory>> {
    +createStandardMoveStrategy(): IMoveStrategy
  }

  IMoveStrategy <|.. StandardMoveStrategy
  MoveStrategyFactory --> IMoveStrategy
  StandardMoveStrategy --> IRules
}

' Command Pattern
package "Command Pattern" {
  interface ICommand <<Command>> {
    +execute(): boolean
  }
  class MoveCommand {
    -board: ToguzBoard
    -hole: int
    -playerColor: int
    +MoveCommand(board: ToguzBoard, hole: int, playerColor: int)
    +execute(): boolean
  }
  class ResetCommand {
    -board: ToguzBoard
    +ResetCommand(board: ToguzBoard)
    +execute(): boolean
  }

  ICommand <|.. MoveCommand
  ICommand <|.. ResetCommand
  MoveCommand --> ToguzBoard
  ResetCommand --> ToguzBoard
}

' Singleton Pattern
package "Singleton Pattern" {
  class GameStateImpl <<Singleton>> {
    -finished: boolean
    -gameResult: int
    -resultChecker: GameResultChecker
    -boardState: BoardState
    +GameStateImpl(boardState: BoardState)
    +isFinished(): boolean
    +getResult(): int
    +checkGameState()
    +reset()
    +setFinished(finished: boolean)
    +setGameResult(gameResult: int)
  }
  class BotMoveScheduler <<Singleton>> {
    +scheduleBotMove(controller: GameController, model: ToguzBoard, players: IPlayer[])
  }
}

' Observer Pattern
package "Observer Pattern" {
  interface IStateObserver <<Observer>> {
    +onStateChanged()
  }
  class GameController {
    -model: ToguzBoard
    -view: MainView
    -players: IPlayer[]
    -botMoveScheduler: BotMoveScheduler
    +GameController(twoPlayers: boolean)
    +onStateChanged()
  }
  class ToguzBoard {
    -boardState: BoardState
    -gameState: IGameState
    -moveStrategy: IMoveStrategy
    -observers: List<IStateObserver>
    +addObserver(observer: IStateObserver)
  }

  GameController -|> IStateObserver
  ToguzBoard --> IStateObserver : observers
  ToguzBoard --> GameController : notifyObservers()
}

' Facade Pattern
package "Facade Pattern" {
  class ToguzBoard <<Facade>> {
    -boardState: BoardState
    -gameState: IGameState
    -moveStrategy: IMoveStrategy
    -observers: List<IStateObserver>
    +executeMove(hole: int, playerColor: int): boolean
    +getGameResult(): int
    +reset()
  }
  ToguzBoard --> BoardState
  ToguzBoard --> IMoveStrategy
  ToguzBoard --> GameStateImpl
}

' Factory Pattern
package "Factory Pattern" {
  class PlayerFactory <<Factory>> {
    +createPlayers(twoPlayers: boolean): IPlayer[]
  }
  class HumanPlayer {
    -color: int
    +HumanPlayer(color: int)
    +makeMove(board: ToguzBoard): int
    +getColor(): int
  }
  class BotPlayer {
    -color: int
    -random: Random
    +BotPlayer(color: int)
    +makeMove(board: ToguzBoard): int
    +getColor(): int
  }

  PlayerFactory --> HumanPlayer
  PlayerFactory --> BotPlayer
}

' Additional Classes for Relationships
interface IRules {
  +canFormTuzdyk(index: int, playerColor: int, boardState: BoardState): boolean
  +applyTuzdyk(index: int, playerColor: int, boardState: BoardState)
  +canCapture(index: int, playerColor: int, boardState: BoardState): boolean
  +applyCapture(index: int, playerColor: int, boardState: BoardState)
}

class BoardState {
  -holes: Holes
  -kazans: Kazans
  -tuzdyks: Tuzdyks
  -currentPlayer: CurrentPlayer
  +getHoleCount(index: int): int
  +getKazan(playerColor: int): int
}

interface IGameState {
  +isFinished(): boolean
  +getResult(): int
  +checkGameState()
  +reset()
}

' Relationships Outside Packages
GameController --> ToguzBoard
GameController --> BotMoveScheduler
GameController --> ICommand
GameStateImpl --> BoardState
ToguzBoard --> IGameState

note bottom of ToguzBoard
  Acts as unified API for:
  - game state
  - rules
  - move strategy
end note

@enduml